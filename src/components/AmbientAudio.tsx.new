'use client';

import { useState, useRef, useEffect } from 'react';
import { Volume2, VolumeX, Loader2 } from 'lucide-react';

export default function AmbientAudio() {
  const [isMuted, setIsMuted] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);

  // Initialize audio on component mount
  useEffect(() => {
    // Create audio element
    const audio = new Audio();
    audio.src = '/Audio/music.mp3';
    audio.loop = true;
    audio.muted = true; // Start muted to allow autoplay
    
    // Set up event handlers
    const handleCanPlay = () => {
      console.log('Audio can play');
      setIsLoading(false);
      setError(null);
    };

    const handleError = () => {
      console.error('Audio error:', audio.error);
      setError(`Failed to load audio: ${audio.error?.message || 'Unknown error'}`);
      setIsLoading(false);
    };

    audio.addEventListener('canplay', handleCanPlay);
    audio.addEventListener('error', handleError);
    
    // Try to preload the audio
    audio.load();
    
    // Save reference to the audio element
    audioRef.current = audio;

    // Clean up
    return () => {
      audio.removeEventListener('canplay', handleCanPlay);
      audio.removeEventListener('error', handleError);
      audio.pause();
      audio.src = ''; // Release resources
    };
  }, []);

  const toggleAudio = async () => {
    if (!audioRef.current) return;
    
    try {
      if (isMuted) {
        // Unmute and play
        audioRef.current.muted = false;
        await audioRef.current.play();
        console.log('Audio started playing');
      } else {
        // Mute and pause
        audioRef.current.muted = true;
        audioRef.current.pause();
      }
      setIsMuted(!isMuted);
    } catch (error) {
      console.error('Error toggling audio:', error);
      setError(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
      
      // If autoplay was prevented, show a message to the user
      if (error instanceof Error && error.name === 'NotAllowedError') {
        alert('Please click anywhere on the page first to enable audio playback');
      }
    }
  };

  // Handle initial user interaction for audio to work
  const handleFirstInteraction = () => {
    if (isMuted && audioRef.current) {
      audioRef.current.muted = false;
      audioRef.current.play().catch(console.error);
      setIsMuted(false);
    }
  };

  return (
    <button
      onClick={toggleAudio}
      onMouseDown={handleFirstInteraction}
      onTouchStart={handleFirstInteraction}
      className={`fixed top-6 left-6 z-50 p-3 rounded-full transition-all duration-300 ${
        isLoading 
          ? 'bg-yellow-500/20 border-yellow-500/50' 
          : error 
            ? 'bg-red-500/20 border-red-500/50' 
            : isMuted 
              ? 'bg-slate-800/80 hover:bg-slate-700/80 border-slate-700' 
              : 'bg-purple-500/80 hover:bg-purple-600/80 border-purple-600'
      } border backdrop-blur-sm group`}
      disabled={isLoading}
      aria-label={isLoading ? 'Loading...' : isMuted ? 'Play music' : 'Pause music'}
    >
      {isLoading ? (
        <Loader2 className="w-5 h-5 text-yellow-400 animate-spin" />
      ) : error ? (
        <VolumeX className="w-5 h-5 text-red-400" />
      ) : isMuted ? (
        <VolumeX className="w-5 h-5 text-slate-400 group-hover:text-white transition-colors" />
      ) : (
        <Volume2 className="w-5 h-5 text-white animate-pulse" />
      )}
    </button>
  );
}
